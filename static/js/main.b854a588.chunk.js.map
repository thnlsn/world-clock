{"version":3,"sources":["components/clock/Clock.js","components/buttons/Button.js","components/buttons/Buttons.js","App.js","index.js"],"names":["Clock","hours","seconds","minutes","useState","secDegrees","setSecDegrees","minDegrees","setMinDegrees","hourDegrees","setHourDegrees","calcDegrees","num","deg","cb","useEffect","className","css","Button","zone","abbv","func","onClick","Buttons","zones","newArr","map","i","length","v","moment","tz","format","push","index","key","App","usZones","names","guess","currentZone","setCurrentZone","setHours","setMinutes","setSeconds","period","setPeriod","setZone","currentInterval","setCurrentInterval","startClock","console","log","setInterval","myTimer","updateTime","clearInterval","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b854a588.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport './Clock.scss';\r\n\r\n// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nconst Clock = ({ hours, seconds, minutes }) => {\r\n  const [secDegrees, setSecDegrees] = useState(seconds);\r\n  const [minDegrees, setMinDegrees] = useState(minutes);\r\n  const [hourDegrees, setHourDegrees] = useState(hours);\r\n\r\n  // function to calculate degrees to rotate hand\r\n  const calcDegrees = (num, deg, cb) => {\r\n    const degreesToAdd = num * deg - 90; // minus 90 because default placement of the hand is 90 degrees past the 12 o'clock placement\r\n    cb(degreesToAdd);\r\n  };\r\n\r\n  useEffect(() => {\r\n    calcDegrees(seconds, 6, setSecDegrees);\r\n    calcDegrees(minutes, 6, setMinDegrees);\r\n    calcDegrees(hours, 30, setHourDegrees);\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='clock-container'>\r\n        <div\r\n          className='clock'\r\n          css={css`\r\n            &:before {\r\n              transform: rotate(${minDegrees}deg);\r\n              transition: 250ms;\r\n            }\r\n            &:after {\r\n              transform: rotate(${secDegrees}deg);\r\n              transition: 50ms;\r\n            }\r\n          `}\r\n        >\r\n          <span\r\n            className='clock__hour-hand'\r\n            css={css`\r\n              &:before {\r\n                transform: rotate(${hourDegrees}deg);\r\n                transition: 500ms;\r\n              }\r\n            `}\r\n          ></span>\r\n          <span className='clock__hand-hinge'></span>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n","import React, { Fragment } from 'react';\r\n\r\nimport moment from 'moment';\r\nimport 'moment-timezone';\r\n\r\nconst Button = ({ zone, abbv, func }) => {\r\n  return (\r\n    <Fragment>\r\n      <div className='buttons__btn unselectable' onClick={() => func(zone)}>\r\n        {abbv}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Fragment } from 'react';\r\nimport './Buttons.scss';\r\n\r\nimport moment from 'moment';\r\nimport 'moment-timezone';\r\n\r\nimport Button from './Button';\r\n\r\nconst Buttons = ({ zones, func }) => {\r\n  let newArr = ((zones) => {\r\n    // Empty object\r\n    let map = [],\r\n      // Empty array\r\n      newArr = [];\r\n    // For as long as the length of zones prop array...\r\n    for (let i = 0; i < zones.length; i++) {\r\n      // let v equal the abbv zone\r\n      let v = moment.tz(zones[i]).format('z');\r\n      // If it is NOT the case that map at index\r\n      if (!map[v]) {\r\n        newArr.push([v, zones[i]]);\r\n        map[v] = true;\r\n      }\r\n    }\r\n    return newArr;\r\n  })(zones);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='buttons-container'>\r\n        <div className='buttons'>\r\n          {newArr.map((zone, index) => {\r\n            return (\r\n              <Button zone={zone[1]} abbv={zone[0]} func={func} key={index} />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.scss';\r\n\r\nimport moment from 'moment';\r\nimport 'moment-timezone';\r\n\r\nimport Clock from './components/clock/Clock';\r\nimport Buttons from './components/buttons/Buttons';\r\n\r\nconst App = () => {\r\n  const usZones = moment.tz.names();\r\n  const [currentZone, setCurrentZone] = useState(moment.tz.guess());\r\n\r\n  const [hours, setHours] = useState(moment.tz(currentZone).format('h'));\r\n  const [minutes, setMinutes] = useState(moment.tz(currentZone).format('m'));\r\n  const [seconds, setSeconds] = useState(moment.tz(currentZone).format('ss'));\r\n  const [period, setPeriod] = useState(moment.tz(currentZone).format('a'));\r\n  const [zone, setZone] = useState(moment.tz(currentZone).format('z'));\r\n\r\n  const [currentInterval, setCurrentInterval] = useState(null);\r\n\r\n  const startClock = (zone) => {\r\n    console.log('Start Clock');\r\n    setCurrentInterval(\r\n      setInterval(() => {\r\n        myTimer(zone);\r\n      }, 500)\r\n    );\r\n\r\n    const myTimer = (zone) => {\r\n      // If zone is passed in (therefore exists and will evaluate to truthy) then updateTime with zone passed in, otherwise do so with users timezone\r\n      zone ? updateTime(zone) : updateTime(moment.tz.guess());\r\n    };\r\n  };\r\n\r\n  const stopClock = () => {\r\n    console.log('Stop Clock');\r\n    clearInterval(currentInterval);\r\n  };\r\n\r\n  const updateTime = (zone) => {\r\n    setHours(moment.tz(zone).format('h'));\r\n    setMinutes(moment.tz(zone).format('mm'));\r\n    setSeconds(moment.tz(zone).format('ss'));\r\n    setPeriod(moment.tz(zone).format('a'));\r\n    setZone(moment.tz(zone).format('z'));\r\n  };\r\n\r\n  const updateZone = (zone) => {\r\n    setCurrentZone(zone);\r\n    updateTime(zone);\r\n    stopClock();\r\n\r\n    startClock(zone);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCurrentZone(moment.tz.guess());\r\n    startClock();\r\n  }, []);\r\n\r\n  return (\r\n    <div className='App'>\r\n      <div className='time'>\r\n        {hours}:{minutes}:{seconds} {period} {zone}\r\n      </div>\r\n      <Clock hours={hours} minutes={minutes} seconds={seconds} />\r\n      <Buttons zones={usZones} func={updateZone} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}